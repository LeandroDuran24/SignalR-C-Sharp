@using Microsoft.AspNetCore.SignalR;
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<h3>Chat Con SignalR</h3>

<div class="form-group row">

    <label class="col-2 col-form-label">Usuario:</label>
    <div class="col-10">
        <InputText class="form-control" @bind-Value=@user />
    </div>

</div>


<div class="form-group row mt-3">
    <label class="col-2 col-form-label">Mensaje:</label>
    <div class="col-10">
        <InputText class="form-control" @bind-Value=@msj />
    </div>
</div>

<p style="color:red">Estado de conexión: @hubConnection?.State.ToString()</p>

<div class="row mt-3">
    <div class="col-2">
    <button class="btn btn-primary" type="button" @onclick="Send" disabled="@(!IsConnected)">Send Message</button>
    </div>
</div>


<div class="mt-5">
    <ul class="list-group">
        @foreach (var msg in Messages)
        {
            <li class="list-group-item bg-light border rounded mb-1 shadow-sm">
                <strong>@msg.Split(':')[0]</strong>: @msg[(msg.IndexOf(":") + 1)..].Trim()
            </li>
        }
    </ul>
</div>

<div class="mt-5">
    @foreach (var msg in Messages)
    {
        <div class="d-flex mb-2">
            <div class="p-2 bg-primary text-white rounded-start rounded-end">
                <strong>@msg.Split(':')[0]</strong>: @msg[(msg.IndexOf(":") + 1)..].Trim()
            </div>
        </div>
    }
</div>


@code {
    string user = string.Empty;
    string msj = string.Empty;
    private HubConnection hubConnection;
    List<string> Messages = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7122/Chat")
            .ConfigureLogging(logging =>
            {
                logging.SetMinimumLevel(LogLevel.Debug);
                logging.AddConsole();
            })//direccion del api con el endpoint del hub
            .Build();


            //Se especifican los parametros y el nombre del Hub en el server
            hubConnection.On<string, string>("ReceivedMessage", (user, message) =>
            {
                var messageComplete = $"{user}: {message}";
                Messages.Add(messageComplete);

                InvokeAsync(StateHasChanged);
            });


            //Inicia la conexion con el server.
            await hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async Task Send()
    {     
        try
        {
            if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
            {
                //Nombre del hub al que vamos a enviar
                await hubConnection.SendAsync("SendMessage", user, msj);
                msj = string.Empty;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al enviar mensaje: " + ex.Message);
        }

    }
    public async ValueTask DisposeAsync()
    {

        await hubConnection.DisposeAsync();
    }
}
